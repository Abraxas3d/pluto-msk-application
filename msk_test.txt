* Acquiring IIO context
* Acquiring AD9361 streaming devices
* Configuring AD9361 for streaming
* Acquiring AD9361 phy channel 0
* Acquiring AD9361 RX lo channel
* Acquiring AD9361 phy channel 0
* Acquiring AD9361 TX lo channel
* Initializing AD9361 IIO streaming channels
* Enabling IIO streaming channels
* set_kernel_buffers returned 0, which is a success.
* Creating non-cyclic IIO buffers with 1 MiS
Hello World! Running TX-DMA access tests.
Opening a character device file in DDR memory.
Memory map the address of the TX-DMAC via its AXI lite control interface register block.
RDL Test: Memory map the address of the MSK block via its AXI lite control interface.
Memory map the address of the MSK block via its AXI lite control interface.
Create a buffer for some transmitted data.
TX DMAC Interface Description (0x00070313@0x0010):
Writing to scratch register in TX-DMAC.
Reading from scratch register in TX-DMAC. We see: (0x5555aaaa@0008)
Reading the TX-DMAC peripheral ID: (0x00000000@0004)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Configure MSK for minimum viable product test.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Reading from MSK block HASH ID LOW: (0xaaaa5555@0000)
Reading from MSK block HASH ID HIGH: (0x5555aaaa@0004)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Initialize MSK block.
Read MSK_INIT: (0x00000000@0008)
bit 0: 0 is normal operation and 1 is initialize modem (reset condition).
Assert INIT: Write 1 to MSK_INIT
Reading MSK_INIT. We see: (0x00000001@0008)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing MSK_CONTROL register.
Writing PTT and loopback disabled, bits 0 set, bit 1 cleared.
Reading back MSK_CONTROL status register. We see: (0x00000001@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Reading the MSK_STATUS register, we see: (0x00000006@0010)
Bit 0 is demod_sync(not implemented), bit 1 is tx_enable, bit 2 is rx_enable
tx_enable is data to DAC enabled. rx_enable is data from ADC enable.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
TX_BIT_COUNT register is read, we see: (0x00000000@0014)
This register reads out the count of data requests made by the modem.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
TX_ENABLE_COUNT register is read and write. It holds the number of clocks on which Tx Enable is active.
First we read it, we see: (0x00000000@0018)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing fb, f1, f2 (values enumerated in github register map for MSK TX).
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing f1, f2 (values enumerated in github register map for MSK RX).
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Reading the LPF_CONFIG_0 register.
First we read it, we see: (0x00020000@0030)
bit 0 is whether or not we freeze the accumulator's current value.
bit 1 holds the PI accumulator at zero.
bits 31:16 are the LPF IIR alpha value.
Reading the LPF_CONFIG_1 register.
First we read it, we see: (0x00640028@0034)
bit 15:0 sets the integral gain of the PI controller integrator.
bit 31:16 sets the proportional gain of the PI controller integrator.
Writing 0x00020000 as filter roll off.
Writing 0x0064 as proportional gain and 0x00000028 as integral gain.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read TX_DATA_WIDTH, which is the modem transmit input/output data width.
We see: (0x00000008@0038)
Read RX_DATA_WIDTH, which is the modem receive input/output data width.
We see: (0x00000008@003c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Pseudo Random Binary Sequence control registers are read.
We read PRBS_CONTROL: (0x00000001@0040)
bit 0 is PRBS data select. 0 is normal data transmit and 1 is PRBS transmit.
bit 1 is PRBS error insert. 0 is no error insertion and 1 inserts a bit error in transmit.
NOTE: error is inserted in both normal and PRBS data selection modes.
bit 2 is PRBS clear. This is reserved.
bit 3 is PRBS sync. 0 is normal operations. 1 synchronizes PRBS monitor.
We read PRBS_INITIAL_STATE: (0xffffffff@0044)
This is the PRBS seed value. It sets the starting value of the PRBS generator.
We read PRBS_POLYNOMIAL: (0x48000000@0048)
Bit positions set to 1 indicate polynomial feedback positions.
We read PRBS_ERROR_MASK: (0x00000001@004c)
Bit positions set to 1 indicate bits that are inverted when a bit error is inserted.
We read PRBS_BIT_COUNT: (0x00000000@0050)
Number of bits received by the PRBS monitor since last BER
can be calculated as the ratio of received bits to errored-bits.
We read PRBS_ERROR_COUNT: (0x00000000@0054)
Number of errored-bits received by the PRBS monitor since last BER
can be calculated as the ratio of received bits to errored-bits.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
We read LPF_ACCUM_F1: (0x00000000@0058)
PI conotroller accumulator value.
We read LPF_ACCUM_F2: (0x00000000@005c)
PI conotroller accumulator value.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Attempt to set up PRBS. Loopback was enabled above in MSK_CONTROL.
Write 0x00000001 to PRBS_CONTROL. PRBS active (bit 0), no errors inserted (bit 1).
We read PRBS_CONTROL: (0x00000001@0040)
Write a value to PRBS_INITIAL_STATE, as the seed.
We read PRBS_INITIAL_STATE: (0xffffffff@0044)
Write 0x48000000 to PRBS_POLYNOMIAL (31,28), a max length Fibonacci sequence generators.
We read PRBS_POLYNOMIAL: (0x48000000@0048)
Write 0x00000001 to PRBS_ERROR_MASK.
We read PRBS_ERROR_MASK: (0x00000001@004c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Deassert INIT: Write 0 to MSK_INIT
Read MSK_INIT: (0x00000000@0008)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00000045@0050)
PRBS_ERROR_COUNT: (0x0000000f@0054)
PRBS_BIT_COUNT:   (0x0000114f@0050)
PRBS_ERROR_COUNT: (0x000007ee@0054)
PRBS_BIT_COUNT:   (0x00002299@0050)
PRBS_ERROR_COUNT: (0x00001097@0054)
PRBS_BIT_COUNT:   (0x000033ae@0050)
PRBS_ERROR_COUNT: (0x000018fa@0054)
PRBS_BIT_COUNT:   (0x000044c5@0050)
PRBS_ERROR_COUNT: (0x000021a8@0054)
PRBS_BIT_COUNT:   (0x000055d7@0050)
PRBS_ERROR_COUNT: (0x00002a32@0054)
PRBS_BIT_COUNT:   (0x000066e7@0050)
PRBS_ERROR_COUNT: (0x000032b0@0054)
PRBS_BIT_COUNT:   (0x000077f6@0050)
PRBS_ERROR_COUNT: (0x00003b31@0054)
PRBS_BIT_COUNT:   (0x00008904@0050)
PRBS_ERROR_COUNT: (0x000043a0@0054)
PRBS_BIT_COUNT:   (0x00009a13@0050)
PRBS_ERROR_COUNT: (0x00004c4e@0054)
PRBS_BIT_COUNT:   (0x0000ab22@0050)
PRBS_ERROR_COUNT: (0x00005501@0054)
PRBS_BIT_COUNT:   (0x0000bc30@0050)
PRBS_ERROR_COUNT: (0x00005d99@0054)
PRBS_BIT_COUNT:   (0x0000cd3f@0050)
PRBS_ERROR_COUNT: (0x0000663a@0054)
PRBS_BIT_COUNT:   (0x0000de4d@0050)
PRBS_ERROR_COUNT: (0x00006efc@0054)
PRBS_BIT_COUNT:   (0x0000ef5a@0050)
PRBS_ERROR_COUNT: (0x00007759@0054)
PRBS_BIT_COUNT:   (0x00010067@0050)
PRBS_ERROR_COUNT: (0x00008003@0054)
PRBS_BIT_COUNT:   (0x00011173@0050)
PRBS_ERROR_COUNT: (0x00008880@0054)
PRBS_BIT_COUNT:   (0x00012281@0050)
PRBS_ERROR_COUNT: (0x00009112@0054)
PRBS_BIT_COUNT:   (0x00013390@0050)
PRBS_ERROR_COUNT: (0x000099b6@0054)
PRBS_BIT_COUNT:   (0x000144a4@0050)
PRBS_ERROR_COUNT: (0x0000a22c@0054)
PRBS_BIT_COUNT:   (0x000155b1@0050)
PRBS_ERROR_COUNT: (0x0000aacc@0054)
PRBS_BIT_COUNT:   (0x000166be@0050)
PRBS_ERROR_COUNT: (0x0000b33a@0054)
PRBS_BIT_COUNT:   (0x000177cb@0050)
PRBS_ERROR_COUNT: (0x0000bb8d@0054)
PRBS_BIT_COUNT:   (0x000188d9@0050)
PRBS_ERROR_COUNT: (0x0000c433@0054)
PRBS_BIT_COUNT:   (0x000199e5@0050)
PRBS_ERROR_COUNT: (0x0000cce4@0054)
PRBS_BIT_COUNT:   (0x0001aaf2@0050)
PRBS_ERROR_COUNT: (0x0000d53c@0054)
PRBS_BIT_COUNT:   (0x0001bbff@0050)
PRBS_ERROR_COUNT: (0x0000ddc8@0054)
PRBS_BIT_COUNT:   (0x0001cd0d@0050)
PRBS_ERROR_COUNT: (0x0000e666@0054)
PRBS_BIT_COUNT:   (0x0001de1a@0050)
PRBS_ERROR_COUNT: (0x0000ee98@0054)
PRBS_BIT_COUNT:   (0x0001ef27@0050)
PRBS_ERROR_COUNT: (0x0000f71a@0054)
PRBS_BIT_COUNT:   (0x00020033@0050)
PRBS_ERROR_COUNT: (0x0000ff8e@0054)
PRBS_BIT_COUNT:   (0x00021140@0050)
PRBS_ERROR_COUNT: (0x00010840@0054)
PRBS_BIT_COUNT:   (0x0002224e@0050)
PRBS_ERROR_COUNT: (0x000110ae@0054)
PRBS_BIT_COUNT:   (0x0002335c@0050)
PRBS_ERROR_COUNT: (0x00011949@0054)
PRBS_BIT_COUNT:   (0x00024468@0050)
PRBS_ERROR_COUNT: (0x000121c1@0054)
PRBS_BIT_COUNT:   (0x00025575@0050)
PRBS_ERROR_COUNT: (0x00012a52@0054)
PRBS_BIT_COUNT:   (0x00026682@0050)
PRBS_ERROR_COUNT: (0x000132cd@0054)
PRBS_BIT_COUNT:   (0x0002778f@0050)
PRBS_ERROR_COUNT: (0x00013b58@0054)
PRBS_BIT_COUNT:   (0x000288a4@0050)
PRBS_ERROR_COUNT: (0x000143a7@0054)
PRBS_BIT_COUNT:   (0x000299b1@0050)
PRBS_ERROR_COUNT: (0x00014beb@0054)
PRBS_BIT_COUNT:   (0x0002aabe@0050)
PRBS_ERROR_COUNT: (0x0001549a@0054)
PRBS_BIT_COUNT:   (0x0002bbd2@0050)
PRBS_ERROR_COUNT: (0x00015d23@0054)
PRBS_BIT_COUNT:   (0x0002ccdf@0050)
PRBS_ERROR_COUNT: (0x00016574@0054)
PRBS_BIT_COUNT:   (0x0002ddf2@0050)
PRBS_ERROR_COUNT: (0x00016e05@0054)
PRBS_BIT_COUNT:   (0x0002ef32@0050)
PRBS_ERROR_COUNT: (0x000176c2@0054)
PRBS_BIT_COUNT:   (0x00030068@0050)
PRBS_ERROR_COUNT: (0x00017f48@0054)
PRBS_BIT_COUNT:   (0x00031189@0050)
PRBS_ERROR_COUNT: (0x000187b5@0054)
PRBS_BIT_COUNT:   (0x000322aa@0050)
PRBS_ERROR_COUNT: (0x00018ff0@0054)
PRBS_BIT_COUNT:   (0x000333cd@0050)
PRBS_ERROR_COUNT: (0x0001989b@0054)
PRBS_BIT_COUNT:   (0x000344ee@0050)
PRBS_ERROR_COUNT: (0x0001a0ed@0054)
PRBS_BIT_COUNT:   (0x0003560a@0050)
PRBS_ERROR_COUNT: (0x0001a985@0054)
PRBS_BIT_COUNT:   (0x00036726@0050)
PRBS_ERROR_COUNT: (0x0001b219@0054)
PRBS_BIT_COUNT:   (0x00037850@0050)
PRBS_ERROR_COUNT: (0x0001bac3@0054)
PRBS_BIT_COUNT:   (0x00038973@0050)
PRBS_ERROR_COUNT: (0x0001c32b@0054)
PRBS_BIT_COUNT:   (0x00039a95@0050)
PRBS_ERROR_COUNT: (0x0001cbb7@0054)
PRBS_BIT_COUNT:   (0x0003abb9@0050)
PRBS_ERROR_COUNT: (0x0001d455@0054)
PRBS_BIT_COUNT:   (0x0003bcd5@0050)
PRBS_ERROR_COUNT: (0x0001dce0@0054)
PRBS_BIT_COUNT:   (0x0003cdf2@0050)
PRBS_ERROR_COUNT: (0x0001e57a@0054)
PRBS_BIT_COUNT:   (0x0003df10@0050)
PRBS_ERROR_COUNT: (0x0001ee17@0054)
PRBS_BIT_COUNT:   (0x0003f06c@0050)
PRBS_ERROR_COUNT: (0x0001f669@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000001@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x0000110b@0050)
PRBS_ERROR_COUNT: (0x000005c7@0054)
PRBS_BIT_COUNT:   (0x0000221d@0050)
PRBS_ERROR_COUNT: (0x00000d4b@0054)
PRBS_BIT_COUNT:   (0x0000333a@0050)
PRBS_ERROR_COUNT: (0x0000152c@0054)
PRBS_BIT_COUNT:   (0x00004472@0050)
PRBS_ERROR_COUNT: (0x00001d3e@0054)
PRBS_BIT_COUNT:   (0x0000558f@0050)
PRBS_ERROR_COUNT: (0x0000256b@0054)
PRBS_BIT_COUNT:   (0x000066b1@0050)
PRBS_ERROR_COUNT: (0x00002dc5@0054)
PRBS_BIT_COUNT:   (0x000077d4@0050)
PRBS_ERROR_COUNT: (0x00003687@0054)
PRBS_BIT_COUNT:   (0x00008900@0050)
PRBS_ERROR_COUNT: (0x00003e52@0054)
PRBS_BIT_COUNT:   (0x00009a15@0050)
PRBS_ERROR_COUNT: (0x000046b0@0054)
PRBS_BIT_COUNT:   (0x0000ab26@0050)
PRBS_ERROR_COUNT: (0x00004ec9@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS (2nd time) by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000001@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x000010fb@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00002205@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00003313@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00004421@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000552f@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000663d@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000774b@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00008859@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00009967@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000aa75@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Do not resync at this time, which is bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000003 to PRBS_CONTROL. PRBS active, errors inserted.
We read PRBS_CONTROL: (0x00000003@0040)
We read MSK_CONTROL: (0x00000001@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x0000ccb3@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0000ddbd@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0000eecb@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0000ffd9@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x000110e7@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x000121fd@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0001330b@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x00014420@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0001552f@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0001663d@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Do not resync at this time, which is bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000001 to PRBS_CONTROL. PRBS active, errors not inserted.
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000001@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00018898@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x000199a3@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001aaba@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001bbd1@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001ccf0@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001de09@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001ef1b@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0002002a@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x00021138@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x00022247@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Enable PTT, disable loopback, and assert RX invert. Write 0x00000005 to MSK_CONTROL.
We read MSK_CONTROL: (0x00000005@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x0002336c@0050)
PRBS_ERROR_COUNT: (0x00000010@0054)
PRBS_BIT_COUNT:   (0x00024471@0050)
PRBS_ERROR_COUNT: (0x0000111a@0054)
PRBS_BIT_COUNT:   (0x0002557f@0050)
PRBS_ERROR_COUNT: (0x00002228@0054)
PRBS_BIT_COUNT:   (0x0002668d@0050)
PRBS_ERROR_COUNT: (0x00003335@0054)
PRBS_BIT_COUNT:   (0x0002779a@0050)
PRBS_ERROR_COUNT: (0x00004442@0054)
PRBS_BIT_COUNT:   (0x000288a7@0050)
PRBS_ERROR_COUNT: (0x0000554f@0054)
PRBS_BIT_COUNT:   (0x000299b4@0050)
PRBS_ERROR_COUNT: (0x0000665c@0054)
PRBS_BIT_COUNT:   (0x0002aac1@0050)
PRBS_ERROR_COUNT: (0x0000776a@0054)
PRBS_BIT_COUNT:   (0x0002bbd0@0050)
PRBS_ERROR_COUNT: (0x00008879@0054)
PRBS_BIT_COUNT:   (0x0002cce2@0050)
PRBS_ERROR_COUNT: (0x0000998b@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000005@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00001104@0050)
PRBS_ERROR_COUNT: (0x00000900@0054)
PRBS_BIT_COUNT:   (0x00002220@0050)
PRBS_ERROR_COUNT: (0x000011ad@0054)
PRBS_BIT_COUNT:   (0x0000333c@0050)
PRBS_ERROR_COUNT: (0x00001a3e@0054)
PRBS_BIT_COUNT:   (0x00004459@0050)
PRBS_ERROR_COUNT: (0x000022d6@0054)
PRBS_BIT_COUNT:   (0x0000557a@0050)
PRBS_ERROR_COUNT: (0x00002b64@0054)
PRBS_BIT_COUNT:   (0x0000669b@0050)
PRBS_ERROR_COUNT: (0x000033db@0054)
PRBS_BIT_COUNT:   (0x000077ba@0050)
PRBS_ERROR_COUNT: (0x00003c86@0054)
PRBS_BIT_COUNT:   (0x000088d5@0050)
PRBS_ERROR_COUNT: (0x000044f9@0054)
PRBS_BIT_COUNT:   (0x000099ef@0050)
PRBS_ERROR_COUNT: (0x00004d8e@0054)
PRBS_BIT_COUNT:   (0x0000ab20@0050)
PRBS_ERROR_COUNT: (0x0000560f@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x0000000b to PRBS_CONTROL. PRBS active, errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x0000000b@0040)
We read PRBS_CONTROL: (0x00000003@0040)
We read MSK_CONTROL: (0x00000005@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00001104@0050)
PRBS_ERROR_COUNT: (0x00000900@0054)
PRBS_BIT_COUNT:   (0x0000220d@0050)
PRBS_ERROR_COUNT: (0x000011a1@0054)
PRBS_BIT_COUNT:   (0x00003326@0050)
PRBS_ERROR_COUNT: (0x00001a33@0054)
PRBS_BIT_COUNT:   (0x00004442@0050)
PRBS_ERROR_COUNT: (0x000022c8@0054)
PRBS_BIT_COUNT:   (0x00005562@0050)
PRBS_ERROR_COUNT: (0x00002b57@0054)
PRBS_BIT_COUNT:   (0x00006680@0050)
PRBS_ERROR_COUNT: (0x000033ca@0054)
PRBS_BIT_COUNT:   (0x0000779a@0050)
PRBS_ERROR_COUNT: (0x00003c72@0054)
PRBS_BIT_COUNT:   (0x000088b8@0050)
PRBS_ERROR_COUNT: (0x000044ef@0054)
PRBS_BIT_COUNT:   (0x000099d7@0050)
PRBS_ERROR_COUNT: (0x00004d83@0054)
PRBS_BIT_COUNT:   (0x0000ab3b@0050)
PRBS_ERROR_COUNT: (0x0000561f@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000005@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00001106@0050)
PRBS_ERROR_COUNT: (0x00000902@0054)
PRBS_BIT_COUNT:   (0x0000220e@0050)
PRBS_ERROR_COUNT: (0x000011a0@0054)
PRBS_BIT_COUNT:   (0x00003321@0050)
PRBS_ERROR_COUNT: (0x00001a2f@0054)
PRBS_BIT_COUNT:   (0x00004431@0050)
PRBS_ERROR_COUNT: (0x000022bd@0054)
PRBS_BIT_COUNT:   (0x0000553f@0050)
PRBS_ERROR_COUNT: (0x00002b45@0054)
PRBS_BIT_COUNT:   (0x00006654@0050)
PRBS_ERROR_COUNT: (0x000033b7@0054)
PRBS_BIT_COUNT:   (0x00007769@0050)
PRBS_ERROR_COUNT: (0x00003c5b@0054)
PRBS_BIT_COUNT:   (0x0000887b@0050)
PRBS_ERROR_COUNT: (0x000044c7@0054)
PRBS_BIT_COUNT:   (0x0000998a@0050)
PRBS_ERROR_COUNT: (0x00004d53@0054)
PRBS_BIT_COUNT:   (0x0000aa9a@0050)
PRBS_ERROR_COUNT: (0x000055d1@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Enable PTT, disable loopback, and deassert RX invert. Write 0x00000001 to MSK_CONTROL.
We read MSK_CONTROL: (0x00000001@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x0000bbc2@0050)
PRBS_ERROR_COUNT: (0x00005e58@0054)
PRBS_BIT_COUNT:   (0x0000ccc8@0050)
PRBS_ERROR_COUNT: (0x00006706@0054)
PRBS_BIT_COUNT:   (0x0000ddd7@0050)
PRBS_ERROR_COUNT: (0x00006f96@0054)
PRBS_BIT_COUNT:   (0x0000eee6@0050)
PRBS_ERROR_COUNT: (0x000077e9@0054)
PRBS_BIT_COUNT:   (0x0000fff5@0050)
PRBS_ERROR_COUNT: (0x0000806a@0054)
PRBS_BIT_COUNT:   (0x00011103@0050)
PRBS_ERROR_COUNT: (0x000088ec@0054)
PRBS_BIT_COUNT:   (0x00012212@0050)
PRBS_ERROR_COUNT: (0x000091a9@0054)
PRBS_BIT_COUNT:   (0x00013321@0050)
PRBS_ERROR_COUNT: (0x00009a54@0054)
PRBS_BIT_COUNT:   (0x0001442f@0050)
PRBS_ERROR_COUNT: (0x0000a2d6@0054)
PRBS_BIT_COUNT:   (0x0001553e@0050)
PRBS_ERROR_COUNT: (0x0000ab87@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, errors not inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000001@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x000010f7@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00002200@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000330f@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000441e@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000552c@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000663a@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00007748@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00008857@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00009966@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000aa74@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Write 0x00000000 to PRBS_CONTROL. Normal operations, errors not inserted, PRBS activated.
We read PRBS_CONTROL: (0x00000001@0040)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing MSK_CONTROL register.
Writing PTT, bits 0 set. Loopback bit 1 set.
We read MSK_CONTROL: (0x00000001@000c)
Normal operations, loopback is no longer enabled.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-= testing RDL memory map interface -=-=
second hash ID address is (0xb6b5f004)
second hash ID value is (0x5555aaaa)
AXIS_XFER_COUNT before streaming is (0x67615bfe)
* Destroying buffers
* Disabling streaming channels
* Destroying context
