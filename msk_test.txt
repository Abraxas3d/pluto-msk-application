* Acquiring IIO context
* Acquiring AD9361 streaming devices
* Configuring AD9361 for streaming
* Acquiring AD9361 phy channel 0
* Acquiring AD9361 RX lo channel
* Acquiring AD9361 phy channel 0
* Acquiring AD9361 TX lo channel
* Initializing AD9361 IIO streaming channels
* Enabling IIO streaming channels
* set_kernel_buffers returned 0, which is a success.
* Creating non-cyclic IIO buffers with 1 MiS
Hello World! Running TX-DMA access tests.
Opening a character device file in DDR memory.
Memory map the address of the TX-DMAC via its AXI lite control interface register block.
Memory map the address of the MSK block via its AXI lite control interface.
Create a buffer for some transmitted data.
TX DMAC Interface Description (0x00070313@0x0010):
Writing to scratch register in TX-DMAC.
Reading from scratch register in TX-DMAC. We see: (0x5555aaaa@0008)
Reading the TX-DMAC peripheral ID: (0x00000000@0004)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Configure MSK for minimum viable product test.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Reading from MSK block HASH ID LOW: (0xaaaa5555@0000)
Reading from MSK block HASH ID HIGH: (0x5555aaaa@0004)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Initialize MSK block.
Read MSK_INIT: (0x00000000@0008)
bit 0: 0 is normal operation and 1 is initialize modem (reset condition).
Assert INIT: Write 1 to MSK_INIT
Reading MSK_INIT. We see: (0x00000001@0008)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing MSK_CONTROL register.
Writing PTT and loopback enable, bits 0 and 1 set.
Reading back MSK_CONTROL status register. We see: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Reading the MSK_STATUS register, we see: (0x00000006@0010)
Bit 0 is demod_sync(not implemented), bit 1 is tx_enable, bit 2 is rx_enable
tx_enable is data to DAC enabled. rx_enable is data from ADC enable.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
TX_BIT_COUNT register is read, we see: (0x00000000@0014)
This register reads out the count of data requests made by the modem.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
TX_ENABLE_COUNT register is read and write. It holds the number of clocks on which Tx Enable is active.
First we read it, we see: (0x00000000@0018)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing fb, f1, f2 (values enumerated in github register map for MSK TX).
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing f1, f2 (values enumerated in github register map for MSK RX).
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Reading the LPF_CONFIG_0 register.
First we read it, we see: (0x00020000@0030)
bit 0 is whether or not we freeze the accumulator's current value.
bit 1 holds the PI accumulator at zero.
bits 31:16 are the LPF IIR alpha value.
Reading the LPF_CONFIG_1 register.
First we read it, we see: (0x00640028@0034)
bit 15:0 sets the integral gain of the PI controller integrator.
bit 31:16 sets the proportional gain of the PI controller integrator.
Writing 0x00020000 as filter roll off.
Writing 0x0064 as proportional gain and 0x00000028 as integral gain.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read TX_DATA_WIDTH, which is the modem transmit input/output data width.
We see: (0x00000008@0038)
Read RX_DATA_WIDTH, which is the modem receive input/output data width.
We see: (0x00000008@003c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Pseudo Random Binary Sequence control registers are read.
We read PRBS_CONTROL: (0x00000000@0040)
bit 0 is PRBS data select. 0 is normal data transmit and 1 is PRBS transmit.
bit 1 is PRBS error insert. 0 is no error insertion and 1 inserts a bit error in transmit.
NOTE: error is inserted in both normal and PRBS data selection modes.
bit 2 is PRBS clear. This is reserved.
bit 3 is PRBS sync. 0 is normal operations. 1 synchronizes PRBS monitor.
We read PRBS_INITIAL_STATE: (0xffffffff@0044)
This is the PRBS seed value. It sets the starting value of the PRBS generator.
We read PRBS_POLYNOMIAL: (0x48000000@0048)
Bit positions set to 1 indicate polynomial feedback positions.
We read PRBS_ERROR_MASK: (0x00000001@004c)
Bit positions set to 1 indicate bits that are inverted when a bit error is inserted.
We read PRBS_BIT_COUNT: (0x00000000@0050)
Number of bits received by the PRBS monitor since last BER
can be calculated as the ratio of received bits to errored-bits.
We read PRBS_ERROR_COUNT: (0x00000000@0054)
Number of errored-bits received by the PRBS monitor since last BER
can be calculated as the ratio of received bits to errored-bits.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
We read LPF_ACCUM_F1: (0x00000000@0058)
PI conotroller accumulator value.
We read LPF_ACCUM_F2: (0x00000000@005c)
PI conotroller accumulator value.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Attempt to set up PRBS. Loopback was enabled above in MSK_CONTROL.
Write 0x00000001 to PRBS_CONTROL. PRBS active (bit 0), no errors inserted (bit 1).
We read PRBS_CONTROL: (0x00000001@0040)
Write a value to PRBS_INITIAL_STATE, as the seed.
We read PRBS_INITIAL_STATE: (0xffffffff@0044)
Write 0x48000000 to PRBS_POLYNOMIAL (31,28), a max length Fibonacci sequence generators.
We read PRBS_POLYNOMIAL: (0x48000000@0048)
Write 0x00000001 to PRBS_ERROR_MASK.
We read PRBS_ERROR_MASK: (0x00000001@004c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Deassert INIT: Write 0 to MSK_INIT
Read MSK_INIT: (0x00000000@0008)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00000067@0050)
PRBS_ERROR_COUNT: (0x0000004e@0054)
PRBS_BIT_COUNT:   (0x000011d3@0050)
PRBS_ERROR_COUNT: (0x00000883@0054)
PRBS_BIT_COUNT:   (0x00002338@0050)
PRBS_ERROR_COUNT: (0x00001111@0054)
PRBS_BIT_COUNT:   (0x00003458@0050)
PRBS_ERROR_COUNT: (0x000019a8@0054)
PRBS_BIT_COUNT:   (0x0000457c@0050)
PRBS_ERROR_COUNT: (0x0000225c@0054)
PRBS_BIT_COUNT:   (0x0000569b@0050)
PRBS_ERROR_COUNT: (0x00002ae9@0054)
PRBS_BIT_COUNT:   (0x000067b9@0050)
PRBS_ERROR_COUNT: (0x00003390@0054)
PRBS_BIT_COUNT:   (0x000078d5@0050)
PRBS_ERROR_COUNT: (0x00003c53@0054)
PRBS_BIT_COUNT:   (0x000089fc@0050)
PRBS_ERROR_COUNT: (0x000044e4@0054)
PRBS_BIT_COUNT:   (0x00009b19@0050)
PRBS_ERROR_COUNT: (0x00004d82@0054)
PRBS_BIT_COUNT:   (0x0000ac39@0050)
PRBS_ERROR_COUNT: (0x0000562c@0054)
PRBS_BIT_COUNT:   (0x0000bd59@0050)
PRBS_ERROR_COUNT: (0x00005ed1@0054)
PRBS_BIT_COUNT:   (0x0000ce76@0050)
PRBS_ERROR_COUNT: (0x0000674f@0054)
PRBS_BIT_COUNT:   (0x0000df97@0050)
PRBS_ERROR_COUNT: (0x00006fd8@0054)
PRBS_BIT_COUNT:   (0x0000f0bd@0050)
PRBS_ERROR_COUNT: (0x00007888@0054)
PRBS_BIT_COUNT:   (0x000101df@0050)
PRBS_ERROR_COUNT: (0x000080e7@0054)
PRBS_BIT_COUNT:   (0x00011302@0050)
PRBS_ERROR_COUNT: (0x00008981@0054)
PRBS_BIT_COUNT:   (0x0001241c@0050)
PRBS_ERROR_COUNT: (0x00009226@0054)
PRBS_BIT_COUNT:   (0x0001353e@0050)
PRBS_ERROR_COUNT: (0x00009a73@0054)
PRBS_BIT_COUNT:   (0x0001465c@0050)
PRBS_ERROR_COUNT: (0x0000a314@0054)
PRBS_BIT_COUNT:   (0x0001577a@0050)
PRBS_ERROR_COUNT: (0x0000abd7@0054)
PRBS_BIT_COUNT:   (0x0001689d@0050)
PRBS_ERROR_COUNT: (0x0000b3f9@0054)
PRBS_BIT_COUNT:   (0x000179be@0050)
PRBS_ERROR_COUNT: (0x0000bc48@0054)
PRBS_BIT_COUNT:   (0x00018adc@0050)
PRBS_ERROR_COUNT: (0x0000c505@0054)
PRBS_BIT_COUNT:   (0x00019bfc@0050)
PRBS_ERROR_COUNT: (0x0000cd75@0054)
PRBS_BIT_COUNT:   (0x0001ad10@0050)
PRBS_ERROR_COUNT: (0x0000d5f8@0054)
PRBS_BIT_COUNT:   (0x0001be23@0050)
PRBS_ERROR_COUNT: (0x0000de97@0054)
PRBS_BIT_COUNT:   (0x0001cf34@0050)
PRBS_ERROR_COUNT: (0x0000e70b@0054)
PRBS_BIT_COUNT:   (0x0001e043@0050)
PRBS_ERROR_COUNT: (0x0000ef85@0054)
PRBS_BIT_COUNT:   (0x0001f152@0050)
PRBS_ERROR_COUNT: (0x0000f835@0054)
PRBS_BIT_COUNT:   (0x00020261@0050)
PRBS_ERROR_COUNT: (0x000100b5@0054)
PRBS_BIT_COUNT:   (0x0002136f@0050)
PRBS_ERROR_COUNT: (0x0001094b@0054)
PRBS_BIT_COUNT:   (0x0002247e@0050)
PRBS_ERROR_COUNT: (0x000111eb@0054)
PRBS_BIT_COUNT:   (0x0002358c@0050)
PRBS_ERROR_COUNT: (0x00011a76@0054)
PRBS_BIT_COUNT:   (0x0002469b@0050)
PRBS_ERROR_COUNT: (0x000122fc@0054)
PRBS_BIT_COUNT:   (0x000257a9@0050)
PRBS_ERROR_COUNT: (0x00012b9b@0054)
PRBS_BIT_COUNT:   (0x000268b7@0050)
PRBS_ERROR_COUNT: (0x00013431@0054)
PRBS_BIT_COUNT:   (0x000279c5@0050)
PRBS_ERROR_COUNT: (0x00013cb8@0054)
PRBS_BIT_COUNT:   (0x00028ad4@0050)
PRBS_ERROR_COUNT: (0x00014567@0054)
PRBS_BIT_COUNT:   (0x00029be2@0050)
PRBS_ERROR_COUNT: (0x00014dda@0054)
PRBS_BIT_COUNT:   (0x0002acf0@0050)
PRBS_ERROR_COUNT: (0x00015638@0054)
PRBS_BIT_COUNT:   (0x0002bdfe@0050)
PRBS_ERROR_COUNT: (0x00015e74@0054)
PRBS_BIT_COUNT:   (0x0002cf0d@0050)
PRBS_ERROR_COUNT: (0x000166f5@0054)
PRBS_BIT_COUNT:   (0x0002e01b@0050)
PRBS_ERROR_COUNT: (0x00016f8d@0054)
PRBS_BIT_COUNT:   (0x0002f12e@0050)
PRBS_ERROR_COUNT: (0x000177d8@0054)
PRBS_BIT_COUNT:   (0x0003023c@0050)
PRBS_ERROR_COUNT: (0x00018072@0054)
PRBS_BIT_COUNT:   (0x0003134a@0050)
PRBS_ERROR_COUNT: (0x000188e3@0054)
PRBS_BIT_COUNT:   (0x00032458@0050)
PRBS_ERROR_COUNT: (0x00019152@0054)
PRBS_BIT_COUNT:   (0x0003356a@0050)
PRBS_ERROR_COUNT: (0x00019a06@0054)
PRBS_BIT_COUNT:   (0x0003467f@0050)
PRBS_ERROR_COUNT: (0x0001a2b5@0054)
PRBS_BIT_COUNT:   (0x00035791@0050)
PRBS_ERROR_COUNT: (0x0001ab6e@0054)
PRBS_BIT_COUNT:   (0x000368a1@0050)
PRBS_ERROR_COUNT: (0x0001b3e4@0054)
PRBS_BIT_COUNT:   (0x000379b0@0050)
PRBS_ERROR_COUNT: (0x0001bcc3@0054)
PRBS_BIT_COUNT:   (0x00038abf@0050)
PRBS_ERROR_COUNT: (0x0001c572@0054)
PRBS_BIT_COUNT:   (0x00039bcd@0050)
PRBS_ERROR_COUNT: (0x0001cdd2@0054)
PRBS_BIT_COUNT:   (0x0003acdd@0050)
PRBS_ERROR_COUNT: (0x0001d679@0054)
PRBS_BIT_COUNT:   (0x0003bdeb@0050)
PRBS_ERROR_COUNT: (0x0001defb@0054)
PRBS_BIT_COUNT:   (0x0003cefa@0050)
PRBS_ERROR_COUNT: (0x0001e769@0054)
PRBS_BIT_COUNT:   (0x0003e008@0050)
PRBS_ERROR_COUNT: (0x0001efbd@0054)
PRBS_BIT_COUNT:   (0x0003f116@0050)
PRBS_ERROR_COUNT: (0x0001f83b@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x000010f6@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x000021fc@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000330a@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000441a@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000552a@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000663a@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00007748@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00008859@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00009968@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000aa76@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS (2nd time) by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x000012c7@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x000024bc@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x000035df@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00004701@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000581d@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00006937@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00007a50@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00008b6f@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00009c9d@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000adb8@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Do not resync at this time, which is bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000003 to PRBS_CONTROL. PRBS active, errors inserted.
We read PRBS_CONTROL: (0x00000003@0040)
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x0000d014@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0000e127@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0000f240@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x00010359@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x00011475@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x00012595@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x000136b0@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x000147ce@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x000158e8@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x00016a05@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Do not resync at this time, which is bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000001 to PRBS_CONTROL. PRBS active, errors not inserted.
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00018ccc@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x00019ddb@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001aef7@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001c00e@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001d124@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001e235@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001f345@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x00020453@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x00021561@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x00022670@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Enable PTT, loopback, and assert RX invert. Write 0x00000007 to MSK_CONTROL.
We read MSK_CONTROL: (0x00000007@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00023795@0050)
PRBS_ERROR_COUNT: (0x0000000f@0054)
PRBS_BIT_COUNT:   (0x0002489a@0050)
PRBS_ERROR_COUNT: (0x0000111b@0054)
PRBS_BIT_COUNT:   (0x000259a9@0050)
PRBS_ERROR_COUNT: (0x00002229@0054)
PRBS_BIT_COUNT:   (0x00026ab8@0050)
PRBS_ERROR_COUNT: (0x00003338@0054)
PRBS_BIT_COUNT:   (0x00027bc6@0050)
PRBS_ERROR_COUNT: (0x00004446@0054)
PRBS_BIT_COUNT:   (0x00028cd4@0050)
PRBS_ERROR_COUNT: (0x00005554@0054)
PRBS_BIT_COUNT:   (0x00029de2@0050)
PRBS_ERROR_COUNT: (0x00006662@0054)
PRBS_BIT_COUNT:   (0x0002aef0@0050)
PRBS_ERROR_COUNT: (0x00007770@0054)
PRBS_BIT_COUNT:   (0x0002bfff@0050)
PRBS_ERROR_COUNT: (0x0000887f@0054)
PRBS_BIT_COUNT:   (0x0002d10e@0050)
PRBS_ERROR_COUNT: (0x0000998e@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000007@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x000010f9@0050)
PRBS_ERROR_COUNT: (0x000008f6@0054)
PRBS_BIT_COUNT:   (0x00002200@0050)
PRBS_ERROR_COUNT: (0x0000119a@0054)
PRBS_BIT_COUNT:   (0x0000330e@0050)
PRBS_ERROR_COUNT: (0x00001a24@0054)
PRBS_BIT_COUNT:   (0x0000441c@0050)
PRBS_ERROR_COUNT: (0x000022b3@0054)
PRBS_BIT_COUNT:   (0x0000552a@0050)
PRBS_ERROR_COUNT: (0x00002b37@0054)
PRBS_BIT_COUNT:   (0x00006639@0050)
PRBS_ERROR_COUNT: (0x000033a3@0054)
PRBS_BIT_COUNT:   (0x00007747@0050)
PRBS_ERROR_COUNT: (0x00003c4b@0054)
PRBS_BIT_COUNT:   (0x00008855@0050)
PRBS_ERROR_COUNT: (0x000044b1@0054)
PRBS_BIT_COUNT:   (0x0000996a@0050)
PRBS_ERROR_COUNT: (0x00004d40@0054)
PRBS_BIT_COUNT:   (0x0000aa78@0050)
PRBS_ERROR_COUNT: (0x000055c0@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x0000000b to PRBS_CONTROL. PRBS active, errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x0000000b@0040)
We read PRBS_CONTROL: (0x00000003@0040)
We read MSK_CONTROL: (0x00000007@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x000010f5@0050)
PRBS_ERROR_COUNT: (0x000008fc@0054)
PRBS_BIT_COUNT:   (0x00002211@0050)
PRBS_ERROR_COUNT: (0x000011a0@0054)
PRBS_BIT_COUNT:   (0x00003328@0050)
PRBS_ERROR_COUNT: (0x00001a30@0054)
PRBS_BIT_COUNT:   (0x0000443e@0050)
PRBS_ERROR_COUNT: (0x000022c3@0054)
PRBS_BIT_COUNT:   (0x00005551@0050)
PRBS_ERROR_COUNT: (0x00002b4e@0054)
PRBS_BIT_COUNT:   (0x00006667@0050)
PRBS_ERROR_COUNT: (0x000033ba@0054)
PRBS_BIT_COUNT:   (0x0000777d@0050)
PRBS_ERROR_COUNT: (0x00003c63@0054)
PRBS_BIT_COUNT:   (0x00008893@0050)
PRBS_ERROR_COUNT: (0x000044d6@0054)
PRBS_BIT_COUNT:   (0x000099a9@0050)
PRBS_ERROR_COUNT: (0x00004d63@0054)
PRBS_BIT_COUNT:   (0x0000aabf@0050)
PRBS_ERROR_COUNT: (0x000055e5@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000007@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x000010f7@0050)
PRBS_ERROR_COUNT: (0x000008fd@0054)
PRBS_BIT_COUNT:   (0x00002215@0050)
PRBS_ERROR_COUNT: (0x000011a5@0054)
PRBS_BIT_COUNT:   (0x0000332b@0050)
PRBS_ERROR_COUNT: (0x00001a33@0054)
PRBS_BIT_COUNT:   (0x0000443c@0050)
PRBS_ERROR_COUNT: (0x000022c3@0054)
PRBS_BIT_COUNT:   (0x00005553@0050)
PRBS_ERROR_COUNT: (0x00002b52@0054)
PRBS_BIT_COUNT:   (0x00006670@0050)
PRBS_ERROR_COUNT: (0x000033c5@0054)
PRBS_BIT_COUNT:   (0x00007791@0050)
PRBS_ERROR_COUNT: (0x00003c71@0054)
PRBS_BIT_COUNT:   (0x000088b4@0050)
PRBS_ERROR_COUNT: (0x000044ef@0054)
PRBS_BIT_COUNT:   (0x000099d7@0050)
PRBS_ERROR_COUNT: (0x00004d82@0054)
PRBS_BIT_COUNT:   (0x0000aaf4@0050)
PRBS_ERROR_COUNT: (0x00005600@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Enable PTT, loopback, and deassert RX invert. Write 0x00000003 to MSK_CONTROL.
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x0000bc32@0050)
PRBS_ERROR_COUNT: (0x00005e95@0054)
PRBS_BIT_COUNT:   (0x0000cd46@0050)
PRBS_ERROR_COUNT: (0x0000674b@0054)
PRBS_BIT_COUNT:   (0x0000de62@0050)
PRBS_ERROR_COUNT: (0x00006fdd@0054)
PRBS_BIT_COUNT:   (0x0000ef7c@0050)
PRBS_ERROR_COUNT: (0x0000783c@0054)
PRBS_BIT_COUNT:   (0x0001009b@0050)
PRBS_ERROR_COUNT: (0x000080bc@0054)
PRBS_BIT_COUNT:   (0x000111be@0050)
PRBS_ERROR_COUNT: (0x00008957@0054)
PRBS_BIT_COUNT:   (0x000122dd@0050)
PRBS_ERROR_COUNT: (0x00009222@0054)
PRBS_BIT_COUNT:   (0x000133fb@0050)
PRBS_ERROR_COUNT: (0x00009ad2@0054)
PRBS_BIT_COUNT:   (0x0001451b@0050)
PRBS_ERROR_COUNT: (0x0000a352@0054)
PRBS_BIT_COUNT:   (0x00015639@0050)
PRBS_ERROR_COUNT: (0x0000ac03@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, errors not inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00001107@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00002212@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000332a@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00004446@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00005568@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000668b@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x000077a6@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x000088be@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x000099d4@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000aae5@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Write 0x00000000 to PRBS_CONTROL. Normal operations, errors not inserted, PRBS deactivated.
We read PRBS_CONTROL: (0x00000000@0040)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing MSK_CONTROL register.
Writing PTT, bits 0 set. Loopback bit 1 cleared.
We read MSK_CONTROL: (0x00000001@000c)
Normal operations, loopback is no longer enabled.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-= testing RDL memory map interface -=-=
second hash ID address is (0x43c00004)
