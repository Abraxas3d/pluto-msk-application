* Acquiring IIO context
* Acquiring AD9361 streaming devices
* Configuring AD9361 for streaming
* Acquiring AD9361 phy channel 0
* Acquiring AD9361 RX lo channel
* Acquiring AD9361 phy channel 0
* Acquiring AD9361 TX lo channel
* Initializing AD9361 IIO streaming channels
* Enabling IIO streaming channels
* set_kernel_buffers returned 0, which is a success.
* Creating non-cyclic IIO buffers with 1 MiS
Hello World! Running TX-DMA access tests.
Opening a character device file in DDR memory.
Memory map the address of the TX-DMAC via its AXI lite control interface register block.
RDL Test: Memory map the address of the MSK block via its AXI lite control interface.
Memory map the address of the MSK block via its AXI lite control interface.
Create a buffer for some transmitted data.
TX DMAC Interface Description (0x00070313@0x0010):
Writing to scratch register in TX-DMAC.
Reading from scratch register in TX-DMAC. We see: (0x5555aaaa@0008)
Reading the TX-DMAC peripheral ID: (0x00000000@0004)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Configure MSK for minimum viable product test.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Reading from MSK block HASH ID LOW: (0xaaaa5555@0000)
Reading from MSK block HASH ID HIGH: (0x5555aaaa@0004)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Initialize MSK block.
Read MSK_INIT: (0x00000000@0008)
bit 0: 0 is normal operation and 1 is initialize modem (reset condition).
Assert INIT: Write 1 to MSK_INIT
Reading MSK_INIT. We see: (0x00000001@0008)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing MSK_CONTROL register.
Writing PTT and loopback enable, bits 0 and 1 set.
Reading back MSK_CONTROL status register. We see: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Reading the MSK_STATUS register, we see: (0x00000006@0010)
Bit 0 is demod_sync(not implemented), bit 1 is tx_enable, bit 2 is rx_enable
tx_enable is data to DAC enabled. rx_enable is data from ADC enable.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
TX_BIT_COUNT register is read, we see: (0x00000000@0014)
This register reads out the count of data requests made by the modem.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
TX_ENABLE_COUNT register is read and write. It holds the number of clocks on which Tx Enable is active.
First we read it, we see: (0x00000000@0018)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing fb, f1, f2 (values enumerated in github register map for MSK TX).
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing f1, f2 (values enumerated in github register map for MSK RX).
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Reading the LPF_CONFIG_0 register.
First we read it, we see: (0x00020000@0030)
bit 0 is whether or not we freeze the accumulator's current value.
bit 1 holds the PI accumulator at zero.
bits 31:16 are the LPF IIR alpha value.
Reading the LPF_CONFIG_1 register.
First we read it, we see: (0x00640028@0034)
bit 15:0 sets the integral gain of the PI controller integrator.
bit 31:16 sets the proportional gain of the PI controller integrator.
Writing 0x00020000 as filter roll off.
Writing 0x0064 as proportional gain and 0x00000028 as integral gain.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read TX_DATA_WIDTH, which is the modem transmit input/output data width.
We see: (0x00000008@0038)
Read RX_DATA_WIDTH, which is the modem receive input/output data width.
We see: (0x00000008@003c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Pseudo Random Binary Sequence control registers are read.
We read PRBS_CONTROL: (0x00000000@0040)
bit 0 is PRBS data select. 0 is normal data transmit and 1 is PRBS transmit.
bit 1 is PRBS error insert. 0 is no error insertion and 1 inserts a bit error in transmit.
NOTE: error is inserted in both normal and PRBS data selection modes.
bit 2 is PRBS clear. This is reserved.
bit 3 is PRBS sync. 0 is normal operations. 1 synchronizes PRBS monitor.
We read PRBS_INITIAL_STATE: (0xffffffff@0044)
This is the PRBS seed value. It sets the starting value of the PRBS generator.
We read PRBS_POLYNOMIAL: (0x48000000@0048)
Bit positions set to 1 indicate polynomial feedback positions.
We read PRBS_ERROR_MASK: (0x00000001@004c)
Bit positions set to 1 indicate bits that are inverted when a bit error is inserted.
We read PRBS_BIT_COUNT: (0x00000000@0050)
Number of bits received by the PRBS monitor since last BER
can be calculated as the ratio of received bits to errored-bits.
We read PRBS_ERROR_COUNT: (0x00000000@0054)
Number of errored-bits received by the PRBS monitor since last BER
can be calculated as the ratio of received bits to errored-bits.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
We read LPF_ACCUM_F1: (0x00000000@0058)
PI conotroller accumulator value.
We read LPF_ACCUM_F2: (0x00000000@005c)
PI conotroller accumulator value.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Attempt to set up PRBS. Loopback was enabled above in MSK_CONTROL.
Write 0x00000001 to PRBS_CONTROL. PRBS active (bit 0), no errors inserted (bit 1).
We read PRBS_CONTROL: (0x00000001@0040)
Write a value to PRBS_INITIAL_STATE, as the seed.
We read PRBS_INITIAL_STATE: (0xffffffff@0044)
Write 0x48000000 to PRBS_POLYNOMIAL (31,28), a max length Fibonacci sequence generators.
We read PRBS_POLYNOMIAL: (0x48000000@0048)
Write 0x00000001 to PRBS_ERROR_MASK.
We read PRBS_ERROR_MASK: (0x00000001@004c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Deassert INIT: Write 0 to MSK_INIT
Read MSK_INIT: (0x00000000@0008)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00000014@0050)
PRBS_ERROR_COUNT: (0x00000011@0054)
PRBS_BIT_COUNT:   (0x00001118@0050)
PRBS_ERROR_COUNT: (0x00000824@0054)
PRBS_BIT_COUNT:   (0x00002227@0050)
PRBS_ERROR_COUNT: (0x00001094@0054)
PRBS_BIT_COUNT:   (0x00003339@0050)
PRBS_ERROR_COUNT: (0x00001916@0054)
PRBS_BIT_COUNT:   (0x0000444e@0050)
PRBS_ERROR_COUNT: (0x000021c3@0054)
PRBS_BIT_COUNT:   (0x0000555e@0050)
PRBS_ERROR_COUNT: (0x00002a4f@0054)
PRBS_BIT_COUNT:   (0x0000666d@0050)
PRBS_ERROR_COUNT: (0x000032de@0054)
PRBS_BIT_COUNT:   (0x0000777d@0050)
PRBS_ERROR_COUNT: (0x00003b96@0054)
PRBS_BIT_COUNT:   (0x0000888b@0050)
PRBS_ERROR_COUNT: (0x00004423@0054)
PRBS_BIT_COUNT:   (0x00009999@0050)
PRBS_ERROR_COUNT: (0x00004cc2@0054)
PRBS_BIT_COUNT:   (0x0000aaa9@0050)
PRBS_ERROR_COUNT: (0x0000554e@0054)
PRBS_BIT_COUNT:   (0x0000bbb6@0050)
PRBS_ERROR_COUNT: (0x00005e0b@0054)
PRBS_BIT_COUNT:   (0x0000ccc5@0050)
PRBS_ERROR_COUNT: (0x00006661@0054)
PRBS_BIT_COUNT:   (0x0000ddd3@0050)
PRBS_ERROR_COUNT: (0x00006ef4@0054)
PRBS_BIT_COUNT:   (0x0000eee0@0050)
PRBS_ERROR_COUNT: (0x0000778e@0054)
PRBS_BIT_COUNT:   (0x0000ffed@0050)
PRBS_ERROR_COUNT: (0x00007fe3@0054)
PRBS_BIT_COUNT:   (0x000110fc@0050)
PRBS_ERROR_COUNT: (0x00008874@0054)
PRBS_BIT_COUNT:   (0x0001220a@0050)
PRBS_ERROR_COUNT: (0x00009113@0054)
PRBS_BIT_COUNT:   (0x00013318@0050)
PRBS_ERROR_COUNT: (0x00009965@0054)
PRBS_BIT_COUNT:   (0x00014426@0050)
PRBS_ERROR_COUNT: (0x0000a1f8@0054)
PRBS_BIT_COUNT:   (0x00015533@0050)
PRBS_ERROR_COUNT: (0x0000aa97@0054)
PRBS_BIT_COUNT:   (0x00016640@0050)
PRBS_ERROR_COUNT: (0x0000b2c2@0054)
PRBS_BIT_COUNT:   (0x0001774d@0050)
PRBS_ERROR_COUNT: (0x0000bafe@0054)
PRBS_BIT_COUNT:   (0x0001885a@0050)
PRBS_ERROR_COUNT: (0x0000c3bd@0054)
PRBS_BIT_COUNT:   (0x00019967@0050)
PRBS_ERROR_COUNT: (0x0000cc40@0054)
PRBS_BIT_COUNT:   (0x0001aa75@0050)
PRBS_ERROR_COUNT: (0x0000d49d@0054)
PRBS_BIT_COUNT:   (0x0001bb82@0050)
PRBS_ERROR_COUNT: (0x0000dd3e@0054)
PRBS_BIT_COUNT:   (0x0001cc90@0050)
PRBS_ERROR_COUNT: (0x0000e5c6@0054)
PRBS_BIT_COUNT:   (0x0001dd9d@0050)
PRBS_ERROR_COUNT: (0x0000ee34@0054)
PRBS_BIT_COUNT:   (0x0001eeaa@0050)
PRBS_ERROR_COUNT: (0x0000f6da@0054)
PRBS_BIT_COUNT:   (0x0001ffb7@0050)
PRBS_ERROR_COUNT: (0x0000ff6e@0054)
PRBS_BIT_COUNT:   (0x000210c4@0050)
PRBS_ERROR_COUNT: (0x000107eb@0054)
PRBS_BIT_COUNT:   (0x000221d2@0050)
PRBS_ERROR_COUNT: (0x00011097@0054)
PRBS_BIT_COUNT:   (0x000232df@0050)
PRBS_ERROR_COUNT: (0x00011921@0054)
PRBS_BIT_COUNT:   (0x000243ec@0050)
PRBS_ERROR_COUNT: (0x000121ac@0054)
PRBS_BIT_COUNT:   (0x000254fe@0050)
PRBS_ERROR_COUNT: (0x00012a3f@0054)
PRBS_BIT_COUNT:   (0x00026634@0050)
PRBS_ERROR_COUNT: (0x000132ea@0054)
PRBS_BIT_COUNT:   (0x00027753@0050)
PRBS_ERROR_COUNT: (0x00013b8a@0054)
PRBS_BIT_COUNT:   (0x00028872@0050)
PRBS_ERROR_COUNT: (0x0001443b@0054)
PRBS_BIT_COUNT:   (0x00029992@0050)
PRBS_ERROR_COUNT: (0x00014cb2@0054)
PRBS_BIT_COUNT:   (0x0002aaab@0050)
PRBS_ERROR_COUNT: (0x00015518@0054)
PRBS_BIT_COUNT:   (0x0002bbd6@0050)
PRBS_ERROR_COUNT: (0x00015d8c@0054)
PRBS_BIT_COUNT:   (0x0002ccf0@0050)
PRBS_ERROR_COUNT: (0x000165d3@0054)
PRBS_BIT_COUNT:   (0x0002de0b@0050)
PRBS_ERROR_COUNT: (0x00016e8a@0054)
PRBS_BIT_COUNT:   (0x0002ef2c@0050)
PRBS_ERROR_COUNT: (0x000176f5@0054)
PRBS_BIT_COUNT:   (0x0003004a@0050)
PRBS_ERROR_COUNT: (0x00017f75@0054)
PRBS_BIT_COUNT:   (0x00031165@0050)
PRBS_ERROR_COUNT: (0x000187f5@0054)
PRBS_BIT_COUNT:   (0x00032287@0050)
PRBS_ERROR_COUNT: (0x00019069@0054)
PRBS_BIT_COUNT:   (0x000333a7@0050)
PRBS_ERROR_COUNT: (0x0001992d@0054)
PRBS_BIT_COUNT:   (0x000344c2@0050)
PRBS_ERROR_COUNT: (0x0001a1cb@0054)
PRBS_BIT_COUNT:   (0x000355dc@0050)
PRBS_ERROR_COUNT: (0x0001aa8f@0054)
PRBS_BIT_COUNT:   (0x000366f9@0050)
PRBS_ERROR_COUNT: (0x0001b31a@0054)
PRBS_BIT_COUNT:   (0x00037817@0050)
PRBS_ERROR_COUNT: (0x0001bbf9@0054)
PRBS_BIT_COUNT:   (0x00038930@0050)
PRBS_ERROR_COUNT: (0x0001c4ad@0054)
PRBS_BIT_COUNT:   (0x00039a4b@0050)
PRBS_ERROR_COUNT: (0x0001cd16@0054)
PRBS_BIT_COUNT:   (0x0003ab6d@0050)
PRBS_ERROR_COUNT: (0x0001d5c8@0054)
PRBS_BIT_COUNT:   (0x0003bc8e@0050)
PRBS_ERROR_COUNT: (0x0001de43@0054)
PRBS_BIT_COUNT:   (0x0003cdaa@0050)
PRBS_ERROR_COUNT: (0x0001e6c4@0054)
PRBS_BIT_COUNT:   (0x0003dec4@0050)
PRBS_ERROR_COUNT: (0x0001ef24@0054)
PRBS_BIT_COUNT:   (0x0003efe6@0050)
PRBS_ERROR_COUNT: (0x0001f7a2@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00001101@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00002208@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000331a@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00004429@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00005537@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00006646@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00007753@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00008861@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000996f@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000aa7d@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS (2nd time) by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x000010f6@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00002204@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00003312@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00004420@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000552e@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000663c@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000774a@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00008858@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00009965@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000aa73@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Do not resync at this time, which is bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000003 to PRBS_CONTROL. PRBS active, errors inserted.
We read PRBS_CONTROL: (0x00000003@0040)
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x0000ccaf@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0000ddb9@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0000eec7@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0000ffd4@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x000110e2@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x000121ef@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0001330c@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0001441a@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x00015527@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
PRBS_BIT_COUNT:   (0x0001663d@0050)
PRBS_ERROR_COUNT: (0x00000001@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Do not resync at this time, which is bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000001 to PRBS_CONTROL. PRBS active, errors not inserted.
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x000188a9@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x000199cd@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001aadc@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001bbf2@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001cd00@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001de14@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0001ef2a@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0002003b@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x0002114a@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
PRBS_BIT_COUNT:   (0x00022259@0050)
PRBS_ERROR_COUNT: (0x00000002@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Enable PTT, loopback, and assert RX invert. Write 0x00000007 to MSK_CONTROL.
We read MSK_CONTROL: (0x00000007@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00023384@0050)
PRBS_ERROR_COUNT: (0x00000017@0054)
PRBS_BIT_COUNT:   (0x0002448f@0050)
PRBS_ERROR_COUNT: (0x00001124@0054)
PRBS_BIT_COUNT:   (0x0002559e@0050)
PRBS_ERROR_COUNT: (0x00002232@0054)
PRBS_BIT_COUNT:   (0x000266ac@0050)
PRBS_ERROR_COUNT: (0x00003340@0054)
PRBS_BIT_COUNT:   (0x000277c1@0050)
PRBS_ERROR_COUNT: (0x00004460@0054)
PRBS_BIT_COUNT:   (0x000288e5@0050)
PRBS_ERROR_COUNT: (0x00005583@0054)
PRBS_BIT_COUNT:   (0x00029a01@0050)
PRBS_ERROR_COUNT: (0x000066a0@0054)
PRBS_BIT_COUNT:   (0x0002ab20@0050)
PRBS_ERROR_COUNT: (0x000077bf@0054)
PRBS_BIT_COUNT:   (0x0002bc41@0050)
PRBS_ERROR_COUNT: (0x000088e0@0054)
PRBS_BIT_COUNT:   (0x0002cd5f@0050)
PRBS_ERROR_COUNT: (0x000099fe@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000007@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00001102@0050)
PRBS_ERROR_COUNT: (0x000008fe@0054)
PRBS_BIT_COUNT:   (0x00002210@0050)
PRBS_ERROR_COUNT: (0x000011a5@0054)
PRBS_BIT_COUNT:   (0x0000332c@0050)
PRBS_ERROR_COUNT: (0x00001a34@0054)
PRBS_BIT_COUNT:   (0x00004448@0050)
PRBS_ERROR_COUNT: (0x000022cd@0054)
PRBS_BIT_COUNT:   (0x0000556d@0050)
PRBS_ERROR_COUNT: (0x00002b5b@0054)
PRBS_BIT_COUNT:   (0x0000668f@0050)
PRBS_ERROR_COUNT: (0x000033d4@0054)
PRBS_BIT_COUNT:   (0x000077ac@0050)
PRBS_ERROR_COUNT: (0x00003c7a@0054)
PRBS_BIT_COUNT:   (0x000088c6@0050)
PRBS_ERROR_COUNT: (0x000044f6@0054)
PRBS_BIT_COUNT:   (0x000099e5@0050)
PRBS_ERROR_COUNT: (0x00004d8b@0054)
PRBS_BIT_COUNT:   (0x0000ab05@0050)
PRBS_ERROR_COUNT: (0x0000560a@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x0000000b to PRBS_CONTROL. PRBS active, errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x0000000b@0040)
We read PRBS_CONTROL: (0x00000003@0040)
We read MSK_CONTROL: (0x00000007@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x00001104@0050)
PRBS_ERROR_COUNT: (0x00000901@0054)
PRBS_BIT_COUNT:   (0x00002211@0050)
PRBS_ERROR_COUNT: (0x000011a5@0054)
PRBS_BIT_COUNT:   (0x0000332c@0050)
PRBS_ERROR_COUNT: (0x00001a36@0054)
PRBS_BIT_COUNT:   (0x0000444c@0050)
PRBS_ERROR_COUNT: (0x000022cf@0054)
PRBS_BIT_COUNT:   (0x0000556c@0050)
PRBS_ERROR_COUNT: (0x00002b5a@0054)
PRBS_BIT_COUNT:   (0x00006689@0050)
PRBS_ERROR_COUNT: (0x000033d0@0054)
PRBS_BIT_COUNT:   (0x0000779f@0050)
PRBS_ERROR_COUNT: (0x00003c72@0054)
PRBS_BIT_COUNT:   (0x000088b0@0050)
PRBS_ERROR_COUNT: (0x000044e8@0054)
PRBS_BIT_COUNT:   (0x000099bf@0050)
PRBS_ERROR_COUNT: (0x00004d6f@0054)
PRBS_BIT_COUNT:   (0x0000aacc@0050)
PRBS_ERROR_COUNT: (0x000055ed@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, no errors inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000007@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x000010fa@0050)
PRBS_ERROR_COUNT: (0x000008f7@0054)
PRBS_BIT_COUNT:   (0x00002201@0050)
PRBS_ERROR_COUNT: (0x0000119b@0054)
PRBS_BIT_COUNT:   (0x0000330f@0050)
PRBS_ERROR_COUNT: (0x00001a25@0054)
PRBS_BIT_COUNT:   (0x0000441e@0050)
PRBS_ERROR_COUNT: (0x000022b3@0054)
PRBS_BIT_COUNT:   (0x0000552b@0050)
PRBS_ERROR_COUNT: (0x00002b38@0054)
PRBS_BIT_COUNT:   (0x00006639@0050)
PRBS_ERROR_COUNT: (0x000033a2@0054)
PRBS_BIT_COUNT:   (0x00007748@0050)
PRBS_ERROR_COUNT: (0x00003c4f@0054)
PRBS_BIT_COUNT:   (0x0000885f@0050)
PRBS_ERROR_COUNT: (0x000044b5@0054)
PRBS_BIT_COUNT:   (0x00009970@0050)
PRBS_ERROR_COUNT: (0x00004d44@0054)
PRBS_BIT_COUNT:   (0x0000aa81@0050)
PRBS_ERROR_COUNT: (0x000055c2@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Enable PTT, loopback, and deassert RX invert. Write 0x00000003 to MSK_CONTROL.
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x0000bba6@0050)
PRBS_ERROR_COUNT: (0x00005e47@0054)
PRBS_BIT_COUNT:   (0x0000ccac@0050)
PRBS_ERROR_COUNT: (0x000066ef@0054)
PRBS_BIT_COUNT:   (0x0000ddb9@0050)
PRBS_ERROR_COUNT: (0x00006f82@0054)
PRBS_BIT_COUNT:   (0x0000eec9@0050)
PRBS_ERROR_COUNT: (0x000077d7@0054)
PRBS_BIT_COUNT:   (0x0000ffd7@0050)
PRBS_ERROR_COUNT: (0x0000805b@0054)
PRBS_BIT_COUNT:   (0x000110e5@0050)
PRBS_ERROR_COUNT: (0x000088d5@0054)
PRBS_BIT_COUNT:   (0x000121f9@0050)
PRBS_ERROR_COUNT: (0x00009196@0054)
PRBS_BIT_COUNT:   (0x00013308@0050)
PRBS_ERROR_COUNT: (0x00009a44@0054)
PRBS_BIT_COUNT:   (0x0001441e@0050)
PRBS_ERROR_COUNT: (0x0000a2c9@0054)
PRBS_BIT_COUNT:   (0x0001552c@0050)
PRBS_ERROR_COUNT: (0x0000ab74@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
resync PRBS by setting and then clearing bit 3 of PRBS_CONTROL. Bit 2 clears counters.
Bit 1 is insert error. Bit 0 is PRBS select.
Write 0x00000009 to PRBS_CONTROL. PRBS active, errors not inserted, PRBS sync.
We read PRBS_CONTROL: (0x00000009@0040)
We read PRBS_CONTROL: (0x00000001@0040)
We read MSK_CONTROL: (0x00000003@000c)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Read PRBS_BIT_COUNT and PRBS_ERROR_COUNT to see what's going on.
PRBS_BIT_COUNT:   (0x000010fa@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00002209@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000331e@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00004435@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000554b@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00006660@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x00007775@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000888b@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x000099a1@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
PRBS_BIT_COUNT:   (0x0000aab7@0050)
PRBS_ERROR_COUNT: (0x00000000@0054)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Write 0x00000000 to PRBS_CONTROL. Normal operations, errors not inserted, PRBS deactivated.
We read PRBS_CONTROL: (0x00000000@0040)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Writing MSK_CONTROL register.
Writing PTT, bits 0 set. Loopback bit 1 cleared.
We read MSK_CONTROL: (0x00000001@000c)
Normal operations, loopback is no longer enabled.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-= testing RDL memory map interface -=-=
second hash ID address is (0xb4b11004)
second hash ID value is (0x5555aaaa)
* Starting IO streaming (press CTRL+C to cancel)
	RX     0.00 MSmp, TX     1.05 MSmp
	RX     0.00 MSmp, TX     2.10 MSmp
	RX     0.00 MSmp, TX     3.15 MSmp
Error pushing buf -110
* Destroying buffers
* Disabling streaming channels
* Destroying context
